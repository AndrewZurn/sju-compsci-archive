package csci230radomskizurnhardy;

import csci230radomskizurnhardy.universities.UniversityDBLibrary;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 * This is the only class that deals directly with the database. Anything requesting or wanting
 * information from the database must go through this class, the DatabaseController. It converts
 * the output from the database into more usable formats such as ArrayLists and TreeMaps
 * @author pghardy
 * @version 1.1
 */
public class DatabaseController {
    
    DatabaseController DB;
    
    /**
     * 
     */
    public void DatabaseController(){
       
    }
    /**
     * 
     * @param school
     * @param state
     * @param location
     * @param control
     * @param numberOfStudents
     * @param percentFemales
     * @param SATVerbal
     * @param SATMath
     * @param expenses
     * @param percentFinancialAid
     * @param numberOfApplicants
     * @param percentAdmitted
     * @param percentEnrolled
     * @param academicsScale
     * @param socialScale
     * @param qualityOfLifeScale
     */
    public static void addUniversity (String school, String state, String location, String control,
            int numberOfStudents, double percentFemales, double SATVerbal, double SATMath,
            double expenses, double percentFinancialAid, int numberOfApplicants,
            double percentAdmitted, double percentEnrolled, int academicsScale,
            int socialScale, int qualityOfLifeScale){
        try {
            UniversityDBLibrary.addUniversity(school, state, location, control, numberOfStudents, percentFemales, SATVerbal, SATMath, expenses, percentFinancialAid, numberOfApplicants, percentAdmitted, percentEnrolled, academicsScale, socialScale, qualityOfLifeScale);
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseController.class.getName()).log(Level.SEVERE, null, ex);
        }
            
    }
    
    /**
     * 
     * @param school
     * @param emphasis
     */
    public static void addUniversityEmphasis(String school, String emphasis){
        try {
            UniversityDBLibrary.addUniversityEmphasis(school, emphasis);
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * 
     * @param firstName
     * @param lastName
     * @param username
     * @param password
     * @param type
     */
    public static void addUser(String firstName, String lastName, String username, String password, char type){
        try {
            UniversityDBLibrary.addUser(firstName, lastName, username, password, type);
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * 
     * @param Id
     * @param school
     * @return true 
     */
    public static boolean addUserSchool(int Id, String school){
        try {
            return UniversityDBLibrary.addUserSchool(Id, school);
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseController.class.getName()).log(Level.SEVERE, null, ex);
        }
         return false;
     }
     
     /**
      * 
      * @param Id
      */
     public static void deactivateUser(int Id){
        try {
            UniversityDBLibrary.deactivateUser(Id);
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseController.class.getName()).log(Level.SEVERE, null, ex);
        }
     }
     
     /**
      * 
      * @param username
      */
     public static void deactivateUser(String username){
        try {
            UniversityDBLibrary.deactivateUser(username);
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseController.class.getName()).log(Level.SEVERE, null, ex);
        }
     }
    
     /**
      * 
      * @param school
      * @param state
      * @param location
      * @param control
      * @param numberOfStudents
      * @param percentFemales
      * @param SATVerbal
      * @param SATMath
      * @param expenses
      * @param percentFinancialAid
      * @param numberOfApplicants
      * @param percentAdmitted
      * @param percentEnrolled
      * @param academicsScale
      * @param socialScale
      * @param qualityOfLifeScale
      */
     public static void editUniversity(String school, String state, String location, String control,
            int numberOfStudents, double percentFemales, double SATVerbal, double SATMath,
            double expenses, double percentFinancialAid, int numberOfApplicants,
            double percentAdmitted, double percentEnrolled, int academicsScale,
            int socialScale, int qualityOfLifeScale){
        try {
            UniversityDBLibrary.editUniversity(school, state, location, control, numberOfStudents, percentFemales, SATVerbal, SATMath, expenses, percentFinancialAid, numberOfApplicants, percentAdmitted, percentEnrolled, academicsScale, socialScale, qualityOfLifeScale);
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseController.class.getName()).log(Level.SEVERE, null, ex);
        }
     }
     /**
      * 
      * @param school
      * @param emphases
      */
     public static void editUniversityEmphases(String school, ArrayList<String> emphases){
        try {
            UniversityDBLibrary.editUniversityEmphases(school, emphases);
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseController.class.getName()).log(Level.SEVERE, null, ex);
        }
     }
     
     /**
      * 
      * @param Id
      * @param firstName
      * @param lastName
      * @param password
      */
     public static void editUser(int Id, String firstName, String lastName, String password){
        try {
            UniversityDBLibrary.editUser(Id, firstName, lastName, password);
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseController.class.getName()).log(Level.SEVERE, null, ex);
        }
     }
     /**
      * 
      * @param Id
      * @param firstName
      * @param lastName
      * @param password
      * @param type
      * @param status
      */
     public static void editUserByAdmin(Integer Id, String firstName, String lastName, String password, char type, char status){
        try {
            UniversityDBLibrary.editUserByAdmin(Id, firstName, lastName, password, type, status);
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseController.class.getName()).log(Level.SEVERE, null, ex);
        }
     }
     
     /**
      * 
      * @param username
      * @param firstName
      * @param lastName
      * @param password
      * @param type
      * @param status
      */
     public static void editUserByAdmin(String username, String firstName, String lastName, String password, char type, char status){
        try {
            UniversityDBLibrary.editUserByAdmin(username, firstName, lastName, password, type, status);
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseController.class.getName()).log(Level.SEVERE, null, ex);
        }
     }
     
//     public void editUserByAdmin(int Id, String firstName, String lastName, String password){
//         UniversityDBLibrary.editUserByAdmin(Id, firstName, lastName, password, type, status);
//     }
     
     /**
      * 
      * @return Returns an ArrayList of Strings containing all the possible Emphases choices
      */
     public static ArrayList<String> getAllPossibleEmphases(){
        ArrayList<String> emphasesArray = new ArrayList<String>();
        String[][]temp = null;
        try {
            temp = UniversityDBLibrary.getAllPossibleEmphases();
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseController.class.getName()).log(Level.SEVERE, null, ex);
        }
        for(int k = 0; k < temp.length; k++){
            emphasesArray.add(temp[k][0]);
           
        }
        return emphasesArray;     
     }
     
     /**
      * 
      * @return Returns a TreeMap with each person's ID number corresponding to an ArrayList of University Names
      */
     public static TreeMap<Integer, ArrayList<String>> getAllSavedSchools(){
        TreeMap<Integer, ArrayList<String>> savedSchoolMap = new TreeMap(); 
        ArrayList<String> valueMap = new ArrayList<String>();
        String[][]temp = null;
        try {
            temp = UniversityDBLibrary.getAllSavedSchools();
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseController.class.getName()).log(Level.SEVERE, null, ex);
        }
        int temp2 = new Integer(temp[0][0]); //gets the ID of the first entry
        for(int i = 0; i < temp.length; i++){
            
            if(temp2 != new Integer(temp[i][0])){ //compares the next ID with the previous one
               valueMap = new ArrayList<String>(); //clears the ArrayList if we have begun a new person
            }
            
            temp2 = new Integer(temp[i][0]);
            for(int j = 0; j < temp[i].length; j=j+2){
                valueMap.add(temp[i][j+1]);
                savedSchoolMap.put(new Integer(temp[i][j]), valueMap);
           }
        }         
        return savedSchoolMap;    
     }
     
     /**
      * 
      * @return Returns an ArrayList of all possible Universities
      */
     public static ArrayList<University> getAllUniversities(){
        ArrayList<University> allUniversities = new ArrayList<University>();
        String[][]temp = null;
        try {
            temp = UniversityDBLibrary.getAllUniversities();
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseController.class.getName()).log(Level.SEVERE, null, ex);
        }
        for(int i = 0; i < temp.length; i++){
            String tempA = temp[i][0];
            String tempB = temp[i][1];
            String tempC = temp[i][2];
            String tempD = temp[i][3];
            int tempE = new Integer(temp[i][4]);
            double tempF= new Double(temp[i][5]);
            double tempG = new Double(temp[i][6]);
            double tempH = new Double(temp[i][7]);
            double tempI = new Double(temp[i][8]);
            double tempJ = new Double(temp[i][9]);
            int tempK = new Integer(temp[i][10]);
            double tempL = new Double(temp[i][11]);
            double tempM = new Double(temp[i][12]);
            int tempN = new Integer(temp[i][13]);
            int tempO = new Integer(temp[i][14]);
            int tempP = new Integer(temp[i][15]);
            University tempU = new University(tempA, tempB, tempC, tempD, tempE, tempF, tempG, tempH, tempI, tempJ, tempK, tempL, tempM, tempN, tempO, tempP);
            allUniversities.add(tempU);
            }
        
        
         return allUniversities; 
     }
     /**
      * 
      * @return Returns a TreeMap of University Names associated with an ArrayList of that school's emphases.
      */
     public static TreeMap<String, ArrayList<String>> getAllUniversityNamesWithEmphases(){
        TreeMap<String, ArrayList<String>> universityEmphases = new TreeMap(); 
        ArrayList<String> valueMap = new ArrayList<String>();
        String[][]temp = null;
        try {
            temp = UniversityDBLibrary.getAllUniversityNamesWithEmphases();
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseController.class.getName()).log(Level.SEVERE, null, ex);
        }
        String temp2 = temp[0][0]; //gets the name of the first entry
        for(int i = 0; i < temp.length; i++){
            
            if(!temp2.equals(temp[i][0])){ //compares the next ID with the previous one
               valueMap = new ArrayList<String>(); //clears the ArrayList if we have begun a new person
            }
            
            temp2 = temp[i][0];
            for(int j = 0; j < temp[i].length; j=j+2){
                valueMap.add(temp[i][j+1]);
                universityEmphases.put(temp[i][j], valueMap);
           }
        }
        return universityEmphases; 
     }
//     public static TreeMap getAllUniversityRecordsWithEmphases(){
//         return null; 
//     }
     /**
      * 
      * @return Returns an ArrayList of all of the Users
      */
     public static ArrayList<User> getAllUsers(){
        ArrayList<User> allUsers = new ArrayList<User>();
        String[][]temp = null;
        try {
            temp = UniversityDBLibrary.getAllUsers();
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseController.class.getName()).log(Level.SEVERE, null, ex);
        }
        for(int i = 0; i < temp.length; i++){
            //int tempA = new Integer(temp[i][0]); do not need the ID number
            String tempB = temp[i][1];
            String tempC = temp[i][2];
            String tempD = temp[i][3];
            String tempE = temp[i][4];
            char tempF= temp[i][5].charAt(0);
            //String tempG = temp[i][6]; do not need ACTIVE? for the constructor
            User tempU = new User(tempB, tempC, tempD, tempE, tempF);
            allUsers.add(tempU);
        }
        return allUsers; 
     }
     /**
      * 
      * @param Id
      * @return Returns an instance of a User matching the corresponding ID number
      */
     public static User getSpecificUser(int Id){
        String[][]temp = null;
        try {
            temp = UniversityDBLibrary.getSpecificUser(Id);
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseController.class.getName()).log(Level.SEVERE, null, ex);
        }
        //int tempA = new Integer(temp[0][0]); do not need the ID number
        String tempB = temp[0][1];
        String tempC = temp[0][2];
        String tempD = temp[0][3];
        String tempE = temp[0][4];
        char tempF= temp[0][5].charAt(0);
        //String tempG = temp[0][6]; do not need ACTIVE? for the constructor
        User tempU = new User(tempB, tempC, tempD, tempE, tempF);
        return tempU;
     }
     /**
      * 
      * @param username
      * @return Returns an instance of a User matching the corresponding username
      */
     public static User getSpecificUser(String username){
         String[][]temp = null;
        try {
            temp = UniversityDBLibrary.getSpecificUser(username);
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseController.class.getName()).log(Level.SEVERE, null, ex);
        }
        //int tempA = new Integer(temp[0][0]); do not need the ID number
        String tempB = temp[0][1];
        String tempC = temp[0][2];
        String tempD = temp[0][3];
        String tempE = temp[0][4];
        char tempF= temp[0][5].charAt(0);
        //String tempG = temp[0][6]; do not need ACTIVE? for the constructor
        User tempU = new User(tempB, tempC, tempD, tempE, tempF);
        return tempU;
     }
     
     /**
      * 
      * @param Id
      * @param school
      */
     public static void removeUserSchool(int Id, String school){
        try {
            UniversityDBLibrary.removeUserSchool(Id, school);
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseController.class.getName()).log(Level.SEVERE, null, ex);
        }
     }
     
     /**
      * 
      * @param args
      */
     public static void main(String args[]){
       //new DatabaseController();
    }
    
    //Database method unused so far: getSpecificUniversityRecordWithEmphases(String university)
    //Database method unused so far: getSavedSchools(int Id)
    
//     for(int i = 0; i < temp.length; i++){
//             for(int j = 0; j < temp[i].length; j++){
//                 System.out.println(i + "," + j + "|" + temp[i][j]);
//             }
//         }
    
    
    
}
